{
  
    
        "post0": {
            "title": "Amazon Scapying EDA",
            "content": "#pip install geopandas #pip install geopandas #pip install --upgrade nbformat #pip install seaborn #pip install -U scikit-learn . import pandas as pd from matplotlib import pyplot as plt import numpy as np from wordcloud import WordCloud from wordcloud import STOPWORDS import re import plotly.graph_objects as go import seaborn as sns . df = pd.read_csv(&quot;/Users/zeyu/Desktop/DS/Amazon_reviews_scraping/Amazon_reviews_scraping/full_reviews.csv&quot;) . info = [] for i in df[&quot;date&quot;]: x = re.sub(&quot;Reviewed in &quot;, &quot;&quot;, i) x1 = re.sub(&quot; on &quot;, &quot;*&quot;, x) info.append(x1) df[&quot;date&quot;] = pd.DataFrame({&quot;date&quot;: info}) df[[&#39;country&#39;,&#39;date&#39;]] = df.date.apply( lambda x: pd.Series(str(x).split(&quot;*&quot;))) star = [] star = df.stars1.combine_first(df.stars2) df[&quot;star&quot;] = pd.DataFrame({&quot;star&quot;: star}) del df[&#39;stars1&#39;] del df[&#39;stars2&#39;] #Convert String to Date df.date = pd.to_datetime(df.date) . df_country = df[&#39;country&#39;].value_counts() fig = go.Figure(go.Bar( x=df_country, y=df_country.index, orientation=&#39;h&#39;)) fig.show() . df_no_star = df[df[&#39;star&#39;].isna()] df_no_star . df_int = [] #df_with_star[&quot;stars&quot;] = [str(x).replace(&#39;:&#39;,&#39; &#39;) for x in df[&quot;stars&quot;]] for i in df[&quot;star&quot;]: x = re.sub(&quot;.0 out of 5 stars&quot;, &quot;&quot;, i) df_int.append(x) df[&quot;rating&quot;] = pd.DataFrame({&quot;rating&quot;: df_int}) df[&quot;rating&quot;] = df[&quot;rating&quot;].astype(int) del df[&#39;star&#39;] . temp = df[&#39;rating&#39;].value_counts() fig = go.Figure(go.Bar( x=temp, y=temp.index, orientation=&#39;h&#39;)) fig.show() . mean_rating = df[&#39;rating&#39;].mean() mean_rating . &quot;&quot;&quot;fig = px.line(df, x=temp.index, y=temp.rating, title=&#39;Life expectancy in Canada&#39;) fig.show()&quot;&quot;&quot; import plotly.express as px temp = df.groupby([df[&#39;date&#39;].dt.date]).mean() temp . temp = df.groupby(df[&#39;date&#39;].dt.strftime(&#39;%B&#39;))[&#39;rating&#39;].mean().sort_values() order_temp = temp.reindex([&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;November&quot;, &quot;December&quot;]) order_temp.plot() . temp = df.groupby(df[&#39;date&#39;].dt.strftime(&#39;%B&#39;))[&#39;rating&#39;].count().sort_values() order_temp = temp.reindex([&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;November&quot;, &quot;December&quot;]) order_temp.plot() . stopwords = set(STOPWORDS) stopwords.update([&quot;Mic&quot;, &quot;Microphone&quot;, &quot;using&quot;,&quot;sound&quot;,&quot;use&quot;]) def cleaned_visualise_word_map(x): words=&quot; &quot; for msg in x: msg = str(msg).lower() words = words+msg+&quot; &quot; wordcloud = WordCloud(stopwords = stopwords, width=3000, height=2500, background_color=&#39;white&#39;).generate(words) fig_size = plt.rcParams[&quot;figure.figsize&quot;] fig_size[0] = 14 fig_size[1] = 7 #Display image appear more smoothly plt.imshow(wordcloud, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) plt.show(wordcloud) cleaned_visualise_word_map(df[&quot;review&quot;]) . df = df[df[&#39;rating&#39;] != 3] df[&#39;sentiment&#39;] = df[&#39;rating&#39;].apply(lambda rating : +1 if rating &gt; 3 else -1) . positive = df[df[&#39;sentiment&#39;] == 1] negative = df[df[&#39;sentiment&#39;] == -1] . df[&#39;sentimentt&#39;] = df[&#39;sentiment&#39;].replace({-1 : &#39;negative&#39;}) df[&#39;sentimentt&#39;] = df[&#39;sentimentt&#39;].replace({1 : &#39;positive&#39;}) fig = px.histogram(df, x=&quot;sentimentt&quot;) fig.update_traces(marker_color=&quot;indianred&quot;,marker_line_color=&#39;rgb(8,48,107)&#39;, marker_line_width=1.5) fig.update_layout(title_text=&#39;Product Sentiment&#39;) fig.show() . stopwords = set(STOPWORDS) #stopwords.update([&quot;Mic&quot;, &quot;Microphone&quot;, &quot;using&quot;,&quot;sound&quot;,&quot;use&quot;]) ## good and great removed because they were included in negative sentiment pos = &quot; &quot;.join(review for review in positive.title) wordcloud2 = WordCloud(stopwords=stopwords).generate(pos) plt.imshow(wordcloud2, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) plt.show() . pos = &quot; &quot;.join(review for review in negative.title) wordcloud2 = WordCloud(stopwords=stopwords).generate(pos) plt.imshow(wordcloud2, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) plt.show() . Sentiment Analysis . def remove_punctuation(text): final = &quot;&quot;.join(u for u in text if u not in (&quot;?&quot;, &quot;.&quot;, &quot;;&quot;, &quot;:&quot;, &quot;!&quot;,&#39;&quot;&#39;)) return final df[&#39;review&#39;] = df[&#39;review&#39;].apply(remove_punctuation) df = df.dropna(subset=[&#39;title&#39;]) df[&#39;title&#39;] = df[&#39;title&#39;].apply(remove_punctuation) . dfNew = df[[&#39;title&#39;,&#39;sentiment&#39;]] dfNew.head() . index = df.index df[&#39;random_number&#39;] = np.random.randn(len(index)) train = df[df[&#39;random_number&#39;] &lt;= 0.8] test = df[df[&#39;random_number&#39;] &gt; 0.8] . from sklearn.feature_extraction.text import CountVectorizer vectorizer = CountVectorizer(token_pattern=r&#39; b w+ b&#39;) train_matrix = vectorizer.fit_transform(train[&#39;title&#39;]) test_matrix = vectorizer.transform(test[&#39;title&#39;]) . from sklearn.linear_model import LogisticRegression lr = LogisticRegression() . X_train = train_matrix X_test = test_matrix y_train = train[&#39;sentiment&#39;] y_test = test[&#39;sentiment&#39;] . lr.fit(X_train,y_train) . predictions = lr.predict(X_test) . from sklearn.metrics import confusion_matrix,classification_report new = np.asarray(y_test) confusion_matrix(predictions,y_test) . print(classification_report(predictions,y_test)) . if(prod_name!=&quot; &quot;): price = listing.find(&#39;span&#39;, attrs={&#39;class&#39;:&quot;s-item__price&quot;}) prod_price = str(price.find(text=True, recursive=False)) x = re.sub(&quot; $&quot;, &quot;&quot;, prod_price) x = x.split(&quot;.&quot;) str_of_price = re.sub((&quot;,&quot;), &quot;&quot;, x[0]) #x = re.sub(&quot;None&quot;, np.NaN, str_of_price) #print(x) #int_of_prices = int(x) #x = re.sub(&quot;none&quot;, &quot;&quot;, x) #x = re.sub(&quot;&quot;, &quot;&quot;, x) #n = int(x) prices.append(str_of_price) &quot;&quot;&quot;df_country = df[&#39;country&#39;].value_counts() # Creating autocpt arguments def func(pct, allvalues): absolute = int(pct / 100.*np.sum(allvalues)) return &quot;{:.1f}% n{:d}&quot;.format(pct, absolute) # Creating plot fig, ax = plt.subplots(figsize =(15, 15)) wedges = plt.pie(df_country, autopct = lambda pct: func(pct, df_country), labels = df_country.index, explode = (0.0, 0.0, 0.00, 0.0, 0.0, 0.00, 0.0, 0.05, 0.10, 0.2, 0.2), ) ax.set_title(&quot;Number of Purchase in Countries&quot;) # show plot plt.show()&quot;&quot;&quot; . &quot;&quot;&quot;summarised_results = df_with_star[&quot;stars&quot;].value_counts() fig, ax = plt.subplots(figsize =(8,5)) # Save the chart so we can loop through the bars below. bars = ax.bar( x=summarised_results.keys(), height=summarised_results.values ) # Axis formatting. ax.spines[&#39;top&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_color(&#39;#DDDDDD&#39;) ax.tick_params(bottom=False, left=False) ax.set_axisbelow(True) ax.yaxis.grid(True, color=&#39;#EEEEEE&#39;) ax.xaxis.grid(False) # Add text annotations to the top of the bars. bar_color = bars[0].get_facecolor() for bar in bars: ax.text( bar.get_x() + bar.get_width() / 2, bar.get_height() + 3, round(bar.get_height(), 1), horizontalalignment=&#39;center&#39;, color=bar_color, weight=&#39;bold&#39; ) # Add labels and a title. Note the use of `labelpad` and `pad` to add some # extra space between the text and the tick labels. ax.set_xlabel(&#39;Stars&#39;, labelpad=15, color=&#39;#333333&#39;) ax.set_ylabel(&#39;Count&#39;, labelpad=15, color=&#39;#333333&#39;) ax.set_title(&#39;Distribution of Star Ratings&#39;, pad=15, color=&#39;#333333&#39;, weight=&#39;bold&#39;) fig.tight_layout()&quot;&quot;&quot; . #df_with_star = df.mask(df.eq(&#39;nan&#39;)).dropna() Drop all with nan #Not efficient way to convert string to number. &quot;&quot;&quot;for i in df[&#39;stars&#39;]: x = i.replace(&quot;2.0 out of 5 stars&quot;,&quot;2&quot;) x1 = x.replace(&quot;3.0 out of 5 stars&quot;,&quot;3&quot;) x2 = x1.replace(&quot;4.0 out of 5 stars&quot;,&quot;4&quot;) x3 = x2.replace(&quot;5.0 out of 5 stars&quot;,&quot;5&quot;) x4 = x3.replace(&quot;1.0 out of 5 stars&quot;,&quot;1&quot;) df_int.append(x4) df_with_star[&quot;stars&quot;] = df_int&quot;&quot;&quot; .",
            "url": "https://christopherguan.github.io/sample-ds-blog/2022/02/03/blog.html",
            "relUrl": "/2022/02/03/blog.html",
            "date": " • Feb 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://christopherguan.github.io/sample-ds-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://christopherguan.github.io/sample-ds-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://christopherguan.github.io/sample-ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://christopherguan.github.io/sample-ds-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}